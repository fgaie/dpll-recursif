                      Mini-projet 1 : solveur DPLL récursif
                             fichier RENDU

Date limite: 28 octobre 2022, 23h59

Identité
--------
Nombre de binôme: 58
Gaie Florian


Questions sur votre code
------------------------
0. Avez-vous testé que `make dpll` s'exécute sans erreurs ou warnings,
   et que ensuite `./dpll sudoku-4x4.cnf` donne la réponse attendue (voir
   fichier README) ?

OUI

---

1. Avez-vous utilisé la fonction `filter_map` (donné dans dpll.ml)
   dans votre implémentation de `simplifie` ?
   - Si oui, expliquez en quelques phrases en français comment vous
     l'avez utilisée.
   - Si non, expliquez en quelques phrases en français comment
     fonctionne votre implémentation de `simplifie`.

OUI
`filter_map` permet d'avoir a ecrire seulement une fonction `simplifie_clause`
qui agit sur une clause seulement, renvoyant `None` si elle doit etre supprimee
ou `Some` si elle doit juste etre modifiee.

---

2. Pour l'implémentation de `unitaire`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ? (Par une
   fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length`,
   `List.rev_append`, ou une fonction `aux_unitaire` que vous avez
   écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `unitaire`.

Aucune fonctions auxiliaires n'ont ete utilises.

---

3. Pour l'implémentation de `pur`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ?  Expliquez en
   quelques phrases en français comment ces fonctions auxiliaires sont
   utilisées dans votre implémentation de la fonction `pur`.

La fonction `litteral_pur : int -> bool` permet de tester si un litteral
est pur. Celle-ci utilise `List.mem` pour tester si les clauses contiennent
un litteral et sa negation.

---

4. Donnez un exemple d'une formule pour laquelle les deux fonctions
   `solveur_split` et `solveur_dpll_rec` ont un comportement
   différent, et expliquez les différences entre ces deux fonctions.

Les deux fonctions ont un comportement different sur la formule `[[1; 2]; [-1]]`

`solveur_dpll_rec` evite de revenir en arriere en utilisant des litteraux
qui n'ont qu'une seule interpretation possible (litteraux purs ou uniques).
Si aucun tel litteral existe, les deux fonctions font la meme chose.

---

5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

NON

---

--fin du fichier RENDU--
